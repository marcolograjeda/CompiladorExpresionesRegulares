
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java.util.LinkedList;
import java_cup.runtime.*;
import compiladorexpresiones.*;
import clases.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\012\000\002\016\002\000\002\014\004\000" +
    "\002\010\005\000\002\010\003\000\002\017\002\000\002" +
    "\006\011\000\002\012\005\000\002\012\005\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\013\003" +
    "\000\002\013\005\000\002\013\003\000\002\007\007\000" +
    "\002\011\004\000\002\011\003\000\002\015\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\004\005\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\074\001\002\000\010\012\007\023\015" +
    "\025\010\001\002\000\004\012\062\001\002\000\004\013" +
    "\033\001\002\000\004\006\ufffd\001\002\000\004\006\032" +
    "\001\002\000\004\006\ufffc\001\002\000\004\006\ufffe\001" +
    "\002\000\004\007\016\001\002\000\004\025\017\001\002" +
    "\000\004\013\020\001\002\000\004\014\021\001\002\000" +
    "\004\025\ufffa\001\002\000\004\025\027\001\002\000\004" +
    "\010\024\001\002\000\010\012\007\023\015\025\010\001" +
    "\002\000\004\006\ufffb\001\002\000\006\010\ufff9\011\030" +
    "\001\002\000\006\010\ufff7\011\ufff7\001\002\000\004\025" +
    "\031\001\002\000\006\010\ufff8\011\ufff8\001\002\000\004" +
    "\002\uffff\001\002\000\004\014\034\001\002\000\014\016" +
    "\037\017\035\020\041\021\042\022\036\001\002\000\020" +
    "\005\046\016\037\017\035\020\041\021\042\022\036\027" +
    "\043\001\002\000\020\005\046\016\037\017\035\020\041" +
    "\021\042\022\036\027\043\001\002\000\020\005\046\016" +
    "\037\017\035\020\041\021\042\022\036\027\043\001\002" +
    "\000\004\010\052\001\002\000\020\005\046\016\037\017" +
    "\035\020\041\021\042\022\036\027\043\001\002\000\020" +
    "\005\046\016\037\017\035\020\041\021\042\022\036\027" +
    "\043\001\002\000\022\005\uffef\010\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\027\uffef\001\002\000\022\005" +
    "\uffed\010\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\027\uffed\001\002\000\022\005\ufff1\010\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\027\ufff1\001\002\000\004" +
    "\025\047\001\002\000\004\006\050\001\002\000\022\005" +
    "\uffee\010\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\027\uffee\001\002\000\022\005\ufff2\010\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\027\ufff2\001\002\000\010" +
    "\012\ufff6\023\ufff6\025\ufff6\001\002\000\010\012\007\023" +
    "\015\025\010\001\002\000\004\006\ufff5\001\002\000\020" +
    "\005\046\016\037\017\035\020\041\021\042\022\036\027" +
    "\043\001\002\000\022\005\ufff4\010\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\027\ufff4\001\002\000\022\005" +
    "\ufff0\010\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\027\ufff0\001\002\000\020\005\046\016\037\017\035\020" +
    "\041\021\042\022\036\027\043\001\002\000\022\005\ufff3" +
    "\010\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\027" +
    "\ufff3\001\002\000\004\012\063\001\002\000\004\012\064" +
    "\001\002\000\004\025\066\001\002\000\006\006\uffea\025" +
    "\uffea\001\002\000\004\007\071\001\002\000\006\006\uffec" +
    "\025\066\001\002\000\006\006\uffeb\025\uffeb\001\002\000" +
    "\004\027\072\001\002\000\004\010\073\001\002\000\006" +
    "\006\uffe9\025\uffe9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\011\005\013\006\010" +
    "\007\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\022\016\021\001\001" +
    "\000\004\010\025\001\001\000\002\001\001\000\012\004" +
    "\024\005\013\006\010\007\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\037\001\001\000\006\012\043\013\057\001\001\000" +
    "\006\012\043\013\056\001\001\000\006\012\043\013\054" +
    "\001\001\000\002\001\001\000\006\012\043\013\050\001" +
    "\001\000\006\012\043\013\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\052\001\001\000\012\004\053\005\013\006\010\007" +
    "\012\001\001\000\002\001\001\000\006\012\043\013\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\043\013\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\066\015\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String salida = "";
    
    public ArrayList<NodoArbol> arboles = CompiladorExpresiones.arboles;
    public ArrayList<String> listaCar = new ArrayList();
    public ArrayList<Expresion> expresiones = CompiladorExpresiones.expresiones;
    public ArrayList<EntradaAnalisis> entradasAnalizar = CompiladorExpresiones.entradasAnalizar;
    static int numHoja = 1;
    public NodoArbol auxiliar = new NodoArbol();
    /**
    * Metodo para error sintactico
    **/
    public void syntax_error(Symbol s){
        System.err.println("Error sintacto l√≠nea " + (s.left) +" columna "+s.right+ ". No se esperaba " +s.value+"."); 
            //practicacompi1.PracticaCompi1.listaSintacticos.add(new ErrorLexico(s.value.toString(), "Sintactico", Integer.toString(s.left), Integer.toString(s.right)));
        }
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        //System.err.println("Error irrecuperable en la linea " + (s.left)+ " columna " +s.right+". Elemento " + s.value + " no reconocido.");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= I 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // I ::= llavea LC llavec 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LC ::= CON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LC ::= EXP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LC ::= POR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CON ::= conj dospuntos identificador guion flecha TCON puntocoma LC 
            {
              String RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int conjleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int conjright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Conjunto conj = (Conjunto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("Nombre: "+nombre+" Conjunto: ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CON",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Conjunto RESULT =null;
listaCar = new ArrayList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TCON ::= NT$0 LCAR 
            {
              Conjunto RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Conjunto) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lista = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Conjunto conjunto = new Conjunto(); conjunto.caracteres = listaCar; RESULT = conjunto;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TCON",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LCAR ::= LCAR coma identificador 
            {
              String RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lista = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaCar.add(id); RESULT = lista + ","+ id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCAR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LCAR ::= identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaCar.add(id); RESULT = id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCAR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$1 ::= 
            {
              String RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoArbol exp = (NodoArbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
numHoja = 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXP ::= identificador guion flecha CEXP puntocoma NT$1 LC 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoArbol exp = (NodoArbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		expresiones.add(new Expresion(nombre,(NodoArbol)exp));
        System.out.println("Nombre Expresion: "+nombre+" Expresion: "+numHoja);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CEXP ::= punto CE CE 
            {
              NodoArbol RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoArbol id1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoArbol id2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(id1.dato.toString()+"."+id2.dato.toString()); //RESULT = "("+id1+"."+id2+")";
        NodoArbol raiz = new NodoArbol(".");
        raiz.izquierda = (NodoArbol)id1;
        raiz.derecha = (NodoArbol)id2;
        if(raiz.izquierda.anulable){
            if(raiz.derecha.anulable){
                raiz.anulable = true;
            }
        }
        if(!raiz.izquierda.anulable){
            if(!raiz.primeros.equals("")){
                raiz.primeros += ","+raiz.izquierda.primeros;
            }else{
                raiz.primeros = raiz.izquierda.primeros;
            }
        }else{
            if(!raiz.primeros.equals("")){
                raiz.primeros += ","+raiz.izquierda.primeros+","+raiz.derecha.primeros;
            }else{
                raiz.primeros = raiz.izquierda.primeros+","+raiz.derecha.primeros;
            }
        }
        if(!raiz.derecha.anulable){
            if(!raiz.siguientes.equals("")){
                raiz.siguientes += ","+raiz.derecha.siguientes;
            }else{
                raiz.siguientes = raiz.derecha.siguientes;
            }
        }else{
            if(!raiz.siguientes.equals("")){
                raiz.siguientes += ","+raiz.izquierda.siguientes+","+raiz.derecha.siguientes;
            }else{
                raiz.siguientes = raiz.izquierda.siguientes+","+raiz.derecha.siguientes;
            }
        }
        RESULT = raiz;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CEXP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CEXP ::= bor CE CE 
            {
              NodoArbol RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoArbol id1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoArbol id2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(id1.dato.toString()+"|"+id2.dato.toString()); //RESULT = "("+id1+"|"+id2+")";
        NodoArbol raiz = new NodoArbol("|");
        raiz.izquierda = (NodoArbol)id1;
        raiz.derecha = (NodoArbol)id2;
        if(raiz.izquierda.anulable){
            if(raiz.derecha.anulable){
                raiz.anulable = true;
            }
        }
        raiz.primeros = raiz.izquierda.primeros+","+raiz.derecha.primeros;
        raiz.siguientes = raiz.izquierda.siguientes+","+raiz.derecha.siguientes;
        RESULT = raiz;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CEXP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CEXP ::= asterisco CE 
            {
              NodoArbol RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoArbol id1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(id1.dato.toString()+"*"); //RESULT = "("+id1+"*)"; 
        NodoArbol raiz = new NodoArbol("*");
        raiz.izquierda = (NodoArbol)id1;
        raiz.anulable = true;
        if(!raiz.primeros.equals("")){
            raiz.primeros += ","+raiz.izquierda.primeros;
            raiz.siguientes += ","+raiz.izquierda.siguientes;
        }else{
            raiz.primeros = raiz.izquierda.primeros;
            raiz.siguientes = raiz.izquierda.siguientes;
        }
        RESULT = raiz;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CEXP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CEXP ::= mas CE 
            {
              NodoArbol RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoArbol id1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(id1.dato.toString()+"+"); //RESULT = "("+id1+"+)"; 
        NodoArbol raiz = new NodoArbol("+");
        raiz.izquierda = (NodoArbol)id1;
        if(!raiz.primeros.equals("")){
            raiz.primeros += ","+raiz.izquierda.primeros;
            raiz.siguientes += ","+raiz.izquierda.siguientes;
        }else{
            raiz.primeros = raiz.izquierda.primeros;
            raiz.siguientes = raiz.izquierda.siguientes;
        }
        RESULT = raiz;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CEXP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CEXP ::= interrogacion CE 
            {
              NodoArbol RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoArbol id1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println(id1+"?"); 
        NodoArbol raiz = new NodoArbol("?");
        raiz.izquierda = (NodoArbol)id1;
        raiz.anulable = true;
        if(!raiz.primeros.equals("")){
            raiz.primeros += ","+raiz.izquierda.primeros;
            raiz.siguientes += ","+raiz.izquierda.siguientes;
        }else{
            raiz.primeros = raiz.izquierda.primeros;
            raiz.siguientes = raiz.izquierda.siguientes;
        }
        RESULT = raiz;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CEXP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CE ::= cadena 
            {
              NodoArbol RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ce = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        NodoArbol hoja = new NodoArbol(ce);
        hoja.hoja = true;
        hoja.numHoja = numHoja;
        hoja.primeros += numHoja;
        hoja.siguientes += numHoja;
        numHoja++;
        System.out.println("Entre en id"); RESULT = hoja;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CE ::= llavea identificador llavec 
            {
              NodoArbol RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ce = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("Entre en {id}"); 
        NodoArbol hoja = new NodoArbol(ce);
        hoja.hoja = true;
        hoja.numHoja = numHoja;
        hoja.primeros += numHoja;
        hoja.siguientes += numHoja;
        numHoja++;
        RESULT = hoja;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CE ::= CEXP 
            {
              NodoArbol RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoArbol ce = (NodoArbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Entre en CE");RESULT = ce;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // POR ::= porcentaje porcentaje porcentaje porcentaje LSEN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("POR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LSEN ::= LSEN SEN 
            {
              String RESULT =null;
		int nuevaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuevaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EntradaAnalisis nueva = (EntradaAnalisis)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		entradasAnalizar.add(nueva);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LSEN",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LSEN ::= SEN 
            {
              String RESULT =null;
		int nuevaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nuevaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EntradaAnalisis nueva = (EntradaAnalisis)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		entradasAnalizar.add(nueva);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LSEN",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SEN ::= identificador dospuntos cadena puntocoma 
            {
              EntradaAnalisis RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		EntradaAnalisis nuevaEntrada = new EntradaAnalisis(nombre, cad.replace("\"","")); 
    System.out.println("Evaluar con "+ nombre+" a " + cad);
    RESULT=nuevaEntrada;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEN",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
