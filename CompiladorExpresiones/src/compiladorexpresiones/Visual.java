/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package compiladorexpresiones;

import analizadores.Lexico;
import analizadores.parser;
import java.io.*;
import clases.*;
import static compiladorexpresiones.CompiladorExpresiones.tokens;
import static compiladorexpresiones.CompiladorExpresiones.listaErrores;
import static compiladorexpresiones.CompiladorExpresiones.arboles;
import static compiladorexpresiones.CompiladorExpresiones.graficar;
import static compiladorexpresiones.CompiladorExpresiones.expresiones;
import static compiladorexpresiones.CompiladorExpresiones.tablaFollow;
import static compiladorexpresiones.CompiladorExpresiones.follow;
import static compiladorexpresiones.CompiladorExpresiones.entradasAnalizar;
import java.io.File;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Junior
 */
public class Visual extends javax.swing.JFrame {

    /**
     * Creates new form Visual
     */
    public int contar = 0;
    public int numHoj = 1;
    public int numeroHojaFinal = 0;
    static File seleccion;
    JFileChooser seleccionArchivo;
    public Visual() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtContenedor = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtConsola = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtContenedor.setColumns(20);
        txtContenedor.setRows(5);
        jScrollPane1.setViewportView(txtContenedor);

        jLabel1.setText("Entrada");

        jButton1.setText("Generar Automatas");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Analizar Entradas");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        txtConsola.setEditable(false);
        txtConsola.setColumns(20);
        txtConsola.setRows(5);
        jScrollPane2.setViewportView(txtConsola);

        jLabel2.setText("Consola");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jMenu1.setText("File");

        jMenuItem1.setText("Abrir");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseClicked(evt);
            }
        });
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Guardar");
        jMenuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem2MouseClicked(evt);
            }
        });
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Guardar Como");
        jMenuItem3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem3MouseClicked(evt);
            }
        });
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Generar XML");
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(358, 358, 358)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jButton1)
                        .addGap(34, 34, 34)
                        .addComponent(jButton2)))
                .addContainerGap(368, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        try {
            String texto = "";
                String linea = "";
            JFileChooser abrir = new JFileChooser();
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("GU", "gu");
            abrir.setFileFilter(filtro);
            
            if (abrir.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                seleccion = abrir.getSelectedFile();
                
                FileReader lector = new FileReader(seleccion);
                BufferedReader buf = new BufferedReader(lector);
                
                while ((linea = buf.readLine()) != null) {
                    //linea = btuf.readLine();
                    System.out.println(linea);
                    texto += linea+"\n";
                }
                System.out.println(texto);
                txtContenedor.setText(texto);
                buf.close();
            }
            //System.out.println("You chose to open this file: "
              //      + abrir.getSelectedFile().getName());
        } catch (Exception e) {
            System.out.println("No escogio archivo ");
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        try{
            tokens = new ArrayList();
            listaErrores = new ArrayList();
            arboles = new ArrayList();
            expresiones = new ArrayList();
            tablaFollow = new ArrayList();
            follow = new ArrayList();
            entradasAnalizar = new ArrayList();
            //System.out.println(txtContenedor.getText());
            StringReader read = new StringReader(txtContenedor.getText());
            Lexico lexico = new Lexico(read);
            parser sintactico = new parser(lexico);
            sintactico.parse();
            String textoConsola = "";
        if(listaErrores.size()==0){
                /*for(Token aux : tokens){
                textoConsola += aux.id+" "+aux.tipo+" "+aux.token+"\n";
                //System.out.println(aux.id+" "+aux.tipo+" "+aux.token+"\n");
            }*/
            int contador = 0;
            for(Expresion auxA : expresiones){
                agregarFDC(contador);
                //auxA.raiz = raiz;
                follow = new ArrayList();
                graficar = "digraph Arbo{\nnode [ shape = record, style=filled]; splines = line \n";
                contar =0;
                numHoj = 1;
                System.out.println(auxA.nombre);
                recorrerContando(auxA.raiz);
                recorrerInOrden(auxA.raiz);
                recorrerParaFollow(auxA.raiz);
                //tablaFollow.add(follow);
                auxA.follow = follow;
                crearArchivoTablaFollow(auxA.nombre, auxA.follow);
                String lexemas = "";
                for(NodoTablaFollow tmp : auxA.follow){
                    if(!lexemas.contains(tmp.dato)){
                        if(lexemas ==""){
                            lexemas += tmp.dato;
                        }else{
                            lexemas += ","+tmp.dato;
                        }
                    }
                }
                String lex[] = lexemas.split(",");
                auxA.lexemas = lex;
                System.out.println("Lexemas : "+lexemas);
                tablaTransiciones(contador,lex.length, lex);
                crearArchivoTablaEstados(auxA.nombre, auxA.listaEstados, lexemas);
                crearArchivoAutomata(auxA.nombre, auxA.listaEstados, lexemas);
                graficar += "}";
                //System.out.println(graficar);
                crearArchivo(auxA.nombre);
                contador++;
            }
            txtConsola.setText("Leectura exitosa");
            for(EntradaAnalisis aux:entradasAnalizar){
                System.out.println("Nombre "+aux.nombreExpresion+" cadena "+aux.entrada);
            }
        }else{
            String textConsola = "Errores: \n";
            for(Token tok:listaErrores){
                textConsola += tok.token + "fila: " + tok.fila + "columna " +tok.columna;
            }
            txtConsola.setText(textoConsola);
        }
        }catch(Exception e){
            System.out.println(e.toString());
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        //for(EntradaAnalisis ana : entradasAnalizar){
        if(listaErrores.size()==0){
            try{
                AnalisisDeEntrada analisis = new AnalisisDeEntrada();
                analisis.ejecutarAnalisis();
                txtConsola.setText(txtConsola.getText()+"\nArchivo generado");
            }catch(Exception e){
                txtConsola.setText(e.toString());
            }
        }else{
            txtConsola.setText(txtConsola.getText()+"\nNo se puede validar. Errores en la entrada");
        }
            
        //}
    }//GEN-LAST:event_jButton2MouseClicked

    private void jMenuItem1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenuItem1MouseClicked

    private void jMenuItem2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem2MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenuItem2MouseClicked

    private void jMenuItem3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem3MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenuItem3MouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        if(seleccion == null){
            seleccionArchivo = new JFileChooser();
            if(seleccionArchivo.showSaveDialog(seleccionArchivo) == JFileChooser.APPROVE_OPTION){
                File archivo = new File(seleccionArchivo.getCurrentDirectory() + "\\" + seleccionArchivo.getSelectedFile().getName() + ".txt");
                seleccion = seleccionArchivo.getSelectedFile();
                try {
                    PrintWriter salida = new PrintWriter(archivo);
                    salida.print(txtContenedor.getText());
                    salida.close();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Visual.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }else{
            File actualArchivo;
            if(seleccion.getPath().toLowerCase().endsWith(".txt")){
                actualArchivo = new File(seleccion.getPath());
            } else {
                actualArchivo = new File(seleccion.getPath() + ".txt");
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        seleccionArchivo = new JFileChooser();
        if(seleccionArchivo.showSaveDialog(seleccionArchivo) == JFileChooser.APPROVE_OPTION){
            File archivo = new File(seleccionArchivo.getCurrentDirectory() + "\\" + seleccionArchivo.getSelectedFile().getName() + ".txt");
            seleccion = seleccionArchivo.getSelectedFile();
            try {
                PrintWriter salida = new PrintWriter(archivo);
                salida.print(txtContenedor.getText());
                salida.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Visual.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    //Recorre y grafica
    public void recorrerInOrden(NodoArbol nodo){
        String primeros = nodo.primeros;
        String siguientes = nodo.siguientes;
        String anulable = "F";
        String hoja = "";
        String dato = "";
        if(nodo.anulable){
            anulable = "V";
        }
        if(nodo.hoja){
            hoja += nodo.numHoja;
            NodoTablaFollow terminal = new NodoTablaFollow(nodo.numHoja, nodo.dato.toString().replace("\"", ""));
            follow.add(terminal);
        }
        if(nodo.dato.toString().equals("|")){
            dato = "\\|";
        }else{
            dato += nodo.dato;
            dato = dato.replace("\"", "");
        }
        graficar += nodo.contador+" [label=\"<S0>|"+primeros+"|{"+dato+"|"+anulable+"|"+hoja+"}|"+siguientes+"|<S1>\"];\n";
        if(nodo.izquierda != null){
            graficar += nodo.contador+":S0->"+nodo.izquierda.contador+"\n";
            recorrerInOrden(nodo.izquierda);
        }
        if(nodo.derecha != null){
            graficar += nodo.contador+":S1->"+nodo.derecha.contador+"\n";
            recorrerInOrden(nodo.derecha);
        }
    }
    
    public void tablaTransiciones(int posicion, int numLexemas, String lexemas[]){
        NodoArbol nodo = expresiones.get(posicion).raiz;
        Estado error = new Estado();
        NodoListaEstado errorL = new NodoListaEstado(error);
        error.numeroEstado = 0;
        Expresion auxiliar = expresiones.get(posicion);
        auxiliar.numEstados++;
        auxiliar.agregarEstado(error);
        auxiliar.estados.add(error);
        Estado uno = new Estado(auxiliar.numEstados,auxiliar.raiz.primeros, numLexemas);
        auxiliar.numEstados++;
        auxiliar.agregarEstado(uno);
        /*
        String formacionTemporal = uno.formacion;
        String primeros[] = uno.formacion.split(",");
        ArrayList<String> iguales = new ArrayList();
        */
        auxiliar.estados.add(uno);
        /*for(String ex : primeros){
            String igualTmp = "";
            String datoEx = auxiliar.follow.get(Integer.parseInt(ex)-1).dato;
            for(String otros : primeros){
                String otro = auxiliar.follow.get(Integer.parseInt(otros)-1).dato;
                if(!ex.equals(otros)){
                    if(otro.equals(datoEx)){
                        if(igualTmp.equals("")){
                            igualTmp += ex+","+otros;                            
                        }else{
                            igualTmp += ","+otros;
                        }
                    }
                }
            } 
            boolean revisar = true;
            if(!igualTmp.equals("")){
                igualTmp = ordenarBurbuja(igualTmp);
                for(String rev : iguales){
                    if(rev.equals(igualTmp)){
                        revisar = false;
                    }
                }
            }else{
                revisar = false;
            }
            if(revisar){
                iguales.add(igualTmp);
            }
        }
        if(iguales.size()>0){
            System.out.println("Lista iguales:");
            for(String rev : iguales){
                System.out.println(rev);
                String aux[] = rev.split(",");
                for(int x = 0; x<aux.length;x++){
                    uno.formacion = uno.formacion.replace(","+aux[x], "");
                    uno.formacion = uno.formacion.replace(aux[x], "");
                }
                String form = "";
                for(String auxPrim : aux){
                    for(NodoTablaFollow a:auxiliar.follow){
                        if(a.numeroHoja == Integer.parseInt(auxPrim)){
                            String sp[] = a.followers.split(",");
                            for(String spa : sp){
                                if(!form.contains(spa)){
                                    if(form.equals("")){
                                        form = spa;
                                    }else{
                                        form += ","+spa;
                                    }
                                }
                            }
                        }
                    }
                }
                auxiliar.estados.add(crearEstado(numLexemas,form,auxiliar, 0));
            }
        }else{
            auxiliar.estados.add(crearEstado(numLexemas,uno.formacion,auxiliar, 1));
        }
        
        uno.formacion = formacionTemporal;*/
        NodoListaEstado tmp = auxiliar.listaEstados;
        while(tmp!=null){
            if(tmp.estado.numeroEstado != 0){
                hacerEstado(tmp.estado, auxiliar, numLexemas, posicion);
                int contador = 0;
                for(String lex : lexemas){
                    for(NodoTablaFollow tabFol : auxiliar.follow){
                        //Esta es prueba para transiciones formadas por varios estados
                        String primeros[] = tmp.estado.formacion.split(",");
                        ArrayList<String> igualesTemp = new ArrayList();
                        ArrayList<String> caracteresIguales = new ArrayList();
                        for(String ex : primeros){
                            String igualTmp = "";
                            String datoEx = auxiliar.follow.get(Integer.parseInt(ex)-1).dato;
                            String car = "";
                            for(String otros : primeros){
                                String otro = auxiliar.follow.get(Integer.parseInt(otros)-1).dato;
                                if(!ex.equals(otros)){
                                    if(otro.equals(datoEx)){
                                        if(igualTmp.equals("")){
                                            igualTmp += ex+","+otros;    
                                            car = otro;
                                        }else{
                                            igualTmp += ","+otros;
                                        }
                                    }
                                }
                            } 
                            boolean revisar = true;
                            if(!igualTmp.equals("")){
                                igualTmp = ordenarBurbuja(igualTmp);
                                for(String rev : igualesTemp){
                                    if(rev.equals(igualTmp)){
                                        revisar = false;
                                    }
                                }
                            }else{
                                revisar = false;
                            }
                            if(revisar){
                                igualesTemp.add(igualTmp);
                                caracteresIguales.add(car);
                            }
                        }
                        
                        boolean contiene = true;
                        for(String rev : igualesTemp){
                            String ver[] = rev.split(",");
                            for(String verificacion : ver){
                                if(!tmp.estado.formacion.contains(verificacion)){
                                    contiene = false;
                                    break;
                                }
                                if(!contiene){
                                    break;
                                }
                            }
                            if(!contiene){
                                break;
                            }
                        }
                        
                        String estadoAux = "";
                        boolean entro = true;
                        for(String carar : caracteresIguales){
                            if(igualesTemp.size()>0&&tabFol.dato.equals(carar)&&carar.equals(lex)&&tmp.estado.formacion.contains(Integer.toString(tabFol.numeroHoja))){
                                entro = false;
                                /*boolean contiene = true;
                                for(String rev : igualesTemp){
                                    String ver[] = rev.split(",");
                                    for(String verificacion : ver){
                                        if(!tmp.estado.formacion.contains(verificacion)){
                                            contiene = false;
                                            break;
                                        }
                                        if(!contiene){
                                            break;
                                        }
                                    }
                                    if(!contiene){
                                        break;
                                    }
                                }
                                if(contiene){*/
                                    for(String rev : igualesTemp){
                                        System.out.println(rev);
                                        String aux[] = rev.split(",");
                                        for(int x = 0; x<aux.length;x++){
                                            uno.formacion = uno.formacion.replace(","+aux[x], "");
                                            uno.formacion = uno.formacion.replace(aux[x], "");
                                            uno.formacion = uno.formacion.replace(",", "");
                                        }
                                        String form = "";
                                        if(!uno.formacion.equals("")){
                                            String noRepetidos[] = uno.formacion.split(",");
                                            for(String noR:noRepetidos){
                                                String igualTmp = "";
                                                String datoEx = auxiliar.follow.get(Integer.parseInt(noR)-1).followers;
                                                if(!estadoExiste(posicion, datoEx)){
                                                    auxiliar.agregarEstado(crearEstado(numLexemas,datoEx,auxiliar, 0));
                                                    auxiliar.numEstados++;
                                                }
                                            }  
                                        }
                                        for(String auxPrim : aux){
                                            for(NodoTablaFollow a:auxiliar.follow){
                                                if(a.numeroHoja == Integer.parseInt(auxPrim)){
                                                    String sp[] = a.followers.split(",");
                                                    for(String spa : sp){
                                                        if(!form.contains(spa)){
                                                            if(form.equals("")){
                                                                form = spa;
                                                            }else{
                                                                form += ","+spa;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        NodoListaEstado tmp2 = auxiliar.listaEstados;
                                        while(tmp2!=null){
                                            if(tmp2.estado.numeroEstado != 0){
                                                if(form.equals(tmp2.estado.formacion)){
                                                    tmp.estado.transiciones[contador] = tmp2.estado.numeroEstado;
                                                }
                                            }
                                            tmp2 = tmp2.siguiente;
                                        }
                                    }
                                //}

                            }
                        }
                        boolean contieneV = false;
                        String contieneTabla[] = tmp.estado.formacion.split(",");
                        for(String caracterContiene:contieneTabla){
                            if(caracterContiene.equals(Integer.toString(tabFol.numeroHoja))){
                                contieneV = true;
                                break;
                            }
                        }
                        if(tabFol.dato.equals(lex)&&contieneV&&entro){
                            if(estadoAux.equals("")){
                                estadoAux += tabFol.followers;
                            }else{
                                estadoAux += ","+tabFol.followers;
                                estadoAux = ordenarBurbuja(estadoAux);
                            }
                            NodoListaEstado tmp2 = auxiliar.listaEstados;
                            while(tmp2!=null){
                                if(tmp2.estado.numeroEstado != 0){
                                    if(estadoAux.equals(tmp2.estado.formacion)){
                                        tmp.estado.transiciones[contador] = tmp2.estado.numeroEstado;
                                    }
                                }
                                tmp2 = tmp2.siguiente;
                            }
                        }
                        
                        
                        System.out.println("Contador :" +contador);
                        //Prueba para estados formados de varios follow
                    }
                    contador++;
                }
            }
            tmp = tmp.siguiente;
        }
        
        /*
        for(Estado estad : auxiliar.estados){
            if(estad.numeroEstado != 0){
                hacerEstado(estad, auxiliar, numLexemas);
            }
        }*/
        System.out.println(uno.formacion);
    }
    
    public void recursivoAgregarEstado(){
        
    }
    
    public void hacerEstado(Estado uno, Expresion auxiliar, int numLexemas, int posicion){
        String formacionTemporal = uno.formacion;
        String primeros[] = formacionTemporal.split(",");
        ArrayList<String> iguales = new ArrayList();
        for(String ex : primeros){
            String igualTmp = "";
            String datoEx = auxiliar.follow.get(Integer.parseInt(ex)-1).dato;
            for(String otros : primeros){
                String otro = auxiliar.follow.get(Integer.parseInt(otros)-1).dato;
                if(!ex.equals(otros)){
                    if(otro.equals(datoEx)){
                        if(igualTmp.equals("")){
                            igualTmp += ex+","+otros;                            
                        }else{
                            igualTmp += ","+otros;
                        }
                    }
                }
            } 
            boolean revisar = true;
            if(!igualTmp.equals("")){
                igualTmp = ordenarBurbuja(igualTmp);
                for(String rev : iguales){
                    if(rev.equals(igualTmp)){
                        revisar = false;
                    }
                }
            }else{
                revisar = false;
            }
            if(revisar){
                iguales.add(igualTmp);
            }
        }
        if(iguales.size()>0){
            System.out.println("Lista iguales:");
            for(String rev : iguales){
                System.out.println(rev);
                String aux[] = rev.split(",");
                for(int x = 0; x<aux.length;x++){
                    formacionTemporal = formacionTemporal.replace(","+aux[x], "");
                    formacionTemporal = formacionTemporal.replace(aux[x], "");
                }
                
                String form = "";
                if(!formacionTemporal.equals("")){
                    String noRepetidos[] = formacionTemporal.split(",");
                    for(String noR:noRepetidos){
                        if(!noR.equals("")){
                            String igualTmp = "";
                            String datoEx = auxiliar.follow.get(Integer.parseInt(noR)-1).followers;
                            if(!estadoExiste(posicion, datoEx)){
                                auxiliar.agregarEstado(crearEstado(numLexemas,datoEx,auxiliar, 0));
                                auxiliar.numEstados++;
                            }
                        }
                    }  
                }
                for(String auxPrim : aux){
                    for(NodoTablaFollow a:auxiliar.follow){
                        if(a.numeroHoja == Integer.parseInt(auxPrim)){
                            String sp[] = a.followers.split(",");
                            for(String spa : sp){
                                if(!form.contains(spa)){
                                    if(form.equals("")){
                                        form = spa;
                                    }else{
                                        form += ","+spa;
                                    }
                                }
                            }
                        }
                    }
                }
                auxiliar.estados.add(crearEstado(numLexemas,form,auxiliar, 0));
                if(!estadoExiste(posicion, form)){
                    auxiliar.agregarEstado(crearEstado(numLexemas,form,auxiliar, 0)); 
                    auxiliar.numEstados++;
                }
            }
        }else{
            auxiliar.estados.add(crearEstado(numLexemas,formacionTemporal,auxiliar, 1));
            for(String ex : primeros){
                String igualTmp = "";
                String datoEx = auxiliar.follow.get(Integer.parseInt(ex)-1).followers;
                if(!estadoExiste(posicion, datoEx)){
                    auxiliar.agregarEstado(crearEstado(numLexemas,datoEx,auxiliar, 0));
                    auxiliar.numEstados++;
                }
            }
        }
        //uno.formacion = formacionTemporal;
    }
    
    public Estado crearEstado(int numero, String follows, Expresion auxiliar, int opcion){
        Estado nuevo = new Estado(auxiliar.numEstados, numero);
        nuevo.formacion = "";
        if(opcion == 0){
            nuevo = new Estado(auxiliar.numEstados, follows, numero);
        }
        if(follows.contains(Integer.toString(auxiliar.follow.size()))){
            nuevo.aceptacion = true;
        }
        return nuevo;
    }
    
    public String ordenarBurbuja(String aux){
        String ord[] = aux.split(",");
        int orden[] = new int[ord.length];
        int contar = 0;
        for(String p:ord){
            orden[contar] = Integer.parseInt(p);
            contar++;
        }
        for(int i=0; i<orden.length;i++){
            for(int j=0; j<orden.length-1;j++){
                if(orden[j+1]<orden[j]){
                    int auxT = orden[j+1];
                    orden[j+1] = orden[j];
                    orden[j] = auxT;
                }
            }
        } 
        String retornar = "";
        for(int a:orden){
            if(retornar.equals("")){
                retornar += a;
            }else{
                retornar += ","+a;
            }
        }
        return retornar;
    }
    
    
    public boolean estadoExiste(int posicion, String prueba){
        boolean existe = false;
        Expresion auxiliar = expresiones.get(posicion);
        NodoListaEstado tmp = auxiliar.listaEstados;
        while(tmp != null){
            if(tmp.estado.formacion.equals(prueba)){
                existe = true;
            }
            tmp = tmp.siguiente;
        }
        return existe;
    }
    
    //Llena la tabla de follow
    public void recorrerParaFollow(NodoArbol nodo){
        if(nodo.dato.equals(".")){
            String primerosString[] = nodo.izquierda.siguientes.split(",");
            ArrayList<Integer> primeros = new ArrayList();
            for(String primerosToInt : primerosString){
                primeros.add(Integer.parseInt(primerosToInt));
            }
            String siguientesString[] = nodo.derecha.primeros.split(",");
            ArrayList<Integer> siguientes = new ArrayList();
            for(String siguientesToInt : siguientesString){
                siguientes.add(Integer.parseInt(siguientesToInt));
            }
            for(NodoTablaFollow aux : follow){
                for(int auxiliarPrimeros:primeros){
                    if(aux.numeroHoja == auxiliarPrimeros){
                        for(int auxiliarSiguientes : siguientes){
                            if(!aux.followers.contains(Integer.toString(auxiliarSiguientes))){
                                if(aux.followers.equals("")){
                                    aux.followers += Integer.toString(auxiliarSiguientes);
                                }else{
                                    aux.followers += ","+Integer.toString(auxiliarSiguientes);
                                    String ord[] = aux.followers.split(",");
                                    int orden[] = new int[ord.length];
                                    int contar = 0;
                                    for(String p:ord){
                                        orden[contar] = Integer.parseInt(p);
                                        contar++;
                                    }
                                    for(int i=0; i<orden.length;i++){
                                        for(int j=0; j<orden.length-1;j++){
                                            if(orden[j+1]<orden[j]){
                                                int auxT = orden[j+1];
                                                orden[j+1] = orden[j];
                                                orden[j] = auxT;
                                            }
                                        }
                                    }
                                    aux.followers = "";
                                    for(int i=0; i<orden.length;i++){
                                        if(aux.followers.equals("")){
                                            aux.followers += Integer.toString(orden[i]);
                                        }else{
                                            aux.followers += ","+Integer.toString(orden[i]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }else if(nodo.dato.equals("+")){
            String primerosString[] = nodo.izquierda.siguientes.split(",");
            ArrayList<Integer> primeros = new ArrayList();
            for(String primerosToInt : primerosString){
                primeros.add(Integer.parseInt(primerosToInt));
            }
            String siguientesString[] = nodo.izquierda.primeros.split(",");
            ArrayList<Integer> siguientes = new ArrayList();
            for(String siguientesToInt : siguientesString){
                siguientes.add(Integer.parseInt(siguientesToInt));
            }
            for(NodoTablaFollow aux : follow){
                for(int auxiliarPrimeros:primeros){
                    if(aux.numeroHoja == auxiliarPrimeros){
                        for(int auxiliarSiguientes : siguientes){
                            if(!aux.followers.contains(Integer.toString(auxiliarSiguientes))){
                                if(aux.followers.equals("")){
                                    aux.followers += Integer.toString(auxiliarSiguientes);
                                }else{
                                    aux.followers += ","+Integer.toString(auxiliarSiguientes);
                                    String ord[] = aux.followers.split(",");
                                    int orden[] = new int[ord.length];
                                    int contar = 0;
                                    for(String p:ord){
                                        orden[contar] = Integer.parseInt(p);
                                        contar++;
                                    }
                                    for(int i=0; i<orden.length;i++){
                                        for(int j=0; j<orden.length-1;j++){
                                            if(orden[j+1]<orden[j]){
                                                int auxT = orden[j+1];
                                                orden[j+1] = orden[j];
                                                orden[j] = auxT;
                                            }
                                        }
                                    }
                                    aux.followers = "";
                                    for(int i=0; i<orden.length;i++){
                                        if(aux.followers.equals("")){
                                            aux.followers += Integer.toString(orden[i]);
                                        }else{
                                            aux.followers += ","+Integer.toString(orden[i]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }else if(nodo.dato.equals("*")){
            String primerosString[] = nodo.izquierda.siguientes.split(",");
            ArrayList<Integer> primeros = new ArrayList();
            for(String primerosToInt : primerosString){
                primeros.add(Integer.parseInt(primerosToInt));
            }
            String siguientesString[] = nodo.izquierda.primeros.split(",");
            ArrayList<Integer> siguientes = new ArrayList();
            for(String siguientesToInt : siguientesString){
                siguientes.add(Integer.parseInt(siguientesToInt));
            }
            for(NodoTablaFollow aux : follow){
                for(int auxiliarPrimeros:primeros){
                    if(aux.numeroHoja == auxiliarPrimeros){
                        for(int auxiliarSiguientes : siguientes){
                            if(!aux.followers.contains(Integer.toString(auxiliarSiguientes))){
                                if(aux.followers.equals("")){
                                    aux.followers += Integer.toString(auxiliarSiguientes);
                                }else{
                                    aux.followers += ","+Integer.toString(auxiliarSiguientes);
                                    String ord[] = aux.followers.split(",");
                                    int orden[] = new int[ord.length];
                                    int contar = 0;
                                    for(String p:ord){
                                        orden[contar] = Integer.parseInt(p);
                                        contar++;
                                    }
                                    for(int i=0; i<orden.length;i++){
                                        for(int j=0; j<orden.length-1;j++){
                                            if(orden[j+1]<orden[j]){
                                                int auxT = orden[j+1];
                                                orden[j+1] = orden[j];
                                                orden[j] = auxT;
                                            }
                                        }
                                    }
                                    aux.followers = "";
                                    for(int i=0; i<orden.length;i++){
                                        if(aux.followers.equals("")){
                                            aux.followers += Integer.toString(orden[i]);
                                        }else{
                                            aux.followers += ","+Integer.toString(orden[i]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if(nodo.izquierda != null){
            recorrerParaFollow(nodo.izquierda);
        }
        if(nodo.derecha != null){
            recorrerParaFollow(nodo.derecha);
        }
    }
    
    public void crearArchivo(String nombre){
        String rutaArchivoGraficar = "C:/ExpresionesRegulares/Arboles/"+nombre;
        try{
            FileWriter archivo = new FileWriter(rutaArchivoGraficar+".txt");
            archivo.write(graficar);
            archivo.close();
            
        }catch(IOException e){
            System.out.println("Error escribiendo el archivo de la expresion "+nombre);
        }
        
        try{
          Runtime rt = Runtime.getRuntime();
          rt.exec( "dot "+rutaArchivoGraficar+".txt -Tjpg -o  "+rutaArchivoGraficar+".jpg" ).waitFor();
          System.out.println("Lo grafique");
        } catch (Exception ex) {
            System.out.println("Problema en 3");
            System.out.println(ex.getLocalizedMessage());
        }
    }
    
    public void crearArchivoTablaFollow(String nombre, ArrayList<NodoTablaFollow> follows){
        String grafica = graficarTablaSiguientes(nombre,follows);
        String rutaArchivoGraficar = "C:/ExpresionesRegulares/TabladeSiguientes/"+nombre;
        try{
            FileWriter archivo = new FileWriter(rutaArchivoGraficar+".txt");
            archivo.write(grafica);
            archivo.close();
            
        }catch(IOException e){
            System.out.println("Error escribiendo el archivo de la expresion "+nombre);
        }
        
        try{
          Runtime rt = Runtime.getRuntime();
          rt.exec( "dot "+rutaArchivoGraficar+".txt -Tjpg -o  "+rutaArchivoGraficar+".jpg" ).waitFor();
          System.out.println("Lo grafique");
        } catch (Exception ex) {
            System.out.println("Problema en 1");
            System.out.println(ex);
        }
    }
    
    public void crearArchivoTablaEstados(String nombre, NodoListaEstado lista, String lexemas){
        String lexema[] = lexemas.split(",");
        String grafica = graficarTablaEstados(nombre,lista,lexema);
        String rutaArchivoGraficar = "C:/ExpresionesRegulares/TabladeTransiciones/"+nombre;
        try{
            FileWriter archivo = new FileWriter(rutaArchivoGraficar+".txt");
            archivo.write(grafica);
            archivo.close();
            
        }catch(IOException e){
            System.out.println("Error escribiendo el archivo de la expresion "+nombre);
        }
        
        try{
          Runtime rt = Runtime.getRuntime();
          rt.exec( "dot "+rutaArchivoGraficar+".txt -Tjpg -o  "+rutaArchivoGraficar+".jpg" ).waitFor();
          System.out.println("Lo grafique");
        } catch (Exception ex) {
            System.out.println("Problema en 2");
            System.out.println(ex);
        }
    }
    
    public void crearArchivoAutomata(String nombre, NodoListaEstado lista, String lexemas){
        String lexema[] = lexemas.split(",");
        String grafica = graficarAutomata(nombre,lista,lexema);
        System.out.println(grafica);
        String rutaArchivoGraficar = "C:/ExpresionesRegulares/Automatas/"+nombre;
        try{
            FileWriter archivo = new FileWriter(rutaArchivoGraficar+".txt");
            archivo.write(grafica);
            archivo.close();
            
        }catch(IOException e){
            System.out.println("Error escribiendo el archivo del automata "+nombre);
        }
        
        try{
          Runtime rt = Runtime.getRuntime();
          rt.exec( "dot "+rutaArchivoGraficar+".txt -Tjpg -o  "+rutaArchivoGraficar+".jpg" ).waitFor();
          System.out.println("Lo grafique");
        } catch (Exception ex) {
            System.out.println("Problema en 2");
            System.out.println(ex);
        }
    }
    
    public String graficarAutomata(String nombre, NodoListaEstado lista, String[] lexemas){
        String graficar = "digraph Automata {\n rankdir = LR;\n";
        NodoListaEstado tmp = lista;
        while(tmp!=null){
            if(tmp.estado.numeroEstado != 0){
                if(tmp.estado.aceptacion){
                    graficar+=tmp.estado.numeroEstado+" [shape = doublecircle]\n";
                }else{
                    graficar+=tmp.estado.numeroEstado+" [shape = circle]\n";
                }
                int pos = 0;
                for(int lexema: tmp.estado.transiciones){
                    if(lexema!=tmp.estado.transiciones[tmp.estado.transiciones.length-1]){
                        graficar += tmp.estado.numeroEstado +"->"+lexema+"[label=\""+lexemas[pos]+"\"];\n";
                    }
                    pos++;
                }
            }
            tmp = tmp.siguiente;
        }
        graficar += "}";
        return graficar;
    }
    
    public String graficarTablaSiguientes(String nombre, ArrayList<NodoTablaFollow> follows){
        /*String grafica = "digraph Tabla{\nnode [ shape = record, style=filled]; splines = line\ntabla[label=\"{{"+nombre+"}";
        for(NodoTablaFollow aux:follows){
            String dato = aux.numeroHoja + " - " + aux.dato;
            String follow = aux.followers;
            grafica += "|{"+dato+"|"+follow+"}";
        }
        grafica += "}\"];\n}";*/
        String grafica = "digraph TablaEstados{\naHtmlTable [\nshape=paintext\nlabel=<<table>\n<tr><td>"+nombre+"</td></tr>\n";
        for(NodoTablaFollow aux:follows){
            String dato = aux.numeroHoja + " - " + aux.dato;
            String follow = aux.followers;
            grafica += "<tr><td>"+dato+"</td><td>"+follow+"</td></tr>\n";
        }
        grafica += "</table>>];\n}";
        return grafica;
    }
    
    public String graficarTablaEstados(String nombre, NodoListaEstado lista, String[] lexemas){
        //String grafica = "digraph TablaEstdos{\nnode [ shape = record, style=filled]; splines = line\ntabla[label=\"{{"+nombre+"}|{Estados";
        String grafica = "digraph TablaEstados{\naHtmlTable [\nshape=paintext\nlabel=<<table><tr><td>"+nombre+
                "</td></tr>\n<tr><td>Estados</td>";
        NodoListaEstado tmp = lista;
            for(int x = 0; x<lexemas.length;x++){
                grafica += "<td>"+lexemas[x]+"</td>";
            }
        grafica += "</tr>\n";
        /*NodoListaEstado tmp = lista;
        for(int x = 0; x<lexemas.length;x++){
            grafica += "|"+lexemas[x];
        }
        grafica += "}";
        while(tmp!=null){
            String transiciones = "";
            String aceptacion = "";
            if(tmp.estado.numeroEstado!=0){
                for(int x:tmp.estado.transiciones){
                    transiciones += "|"+x;
                }
                if(tmp.estado.aceptacion){
                    aceptacion = "*";
                }
                grafica += "|{"+aceptacion+"S"+tmp.estado.numeroEstado+" - "+tmp.estado.formacion+transiciones+"}";
            }
            tmp = tmp.siguiente;
        }
        grafica += "}\"];\n}";*/
        while(tmp!=null){
            String transiciones = "";
            String aceptacion = "";
            if(tmp.estado.numeroEstado!=0){
                int contador = 0;
                for(int x:tmp.estado.transiciones){
                    if(x == 0){
                        transiciones += "<td>---</td>";
                    }else if(contador==lexemas.length-1){
                        transiciones += "<td>A</td>";
                    }else{
                        transiciones += "<td>"+x+"</td>";
                    }
                    
                    contador++;
                }
                if(tmp.estado.aceptacion){
                    aceptacion = "*";
                }
                grafica += "<tr><td>"+aceptacion+" "+tmp.estado.numeroEstado+" - "+tmp.estado.formacion+"</td>"+transiciones+"</tr>\n";
            }
            tmp = tmp.siguiente;
        }
        grafica += "</table>>];\n}";
        return grafica;
    }
    
    public void recorrerContando(NodoArbol nodo){
        nodo.contador = contar;
        contar++;
        /*if(nodo.hoja){
            nodo.numHoja = numHoj;
            numHoj++;
        }*/
        if(nodo.izquierda != null){
            recorrerContando(nodo.izquierda);
        }
        if(nodo.derecha != null){
            recorrerContando(nodo.derecha);
        }
    }
    
    public void agregarFDC(int posicion){
        NodoArbol nodo = expresiones.get(posicion).raiz;
        encontrarMasDerecha(nodo);
        NodoArbol raiz = new NodoArbol();
        NodoArbol derecha = new NodoArbol();
        derecha.hoja = true;
        derecha.numHoja = numeroHojaFinal;
        derecha.dato = "$";
        derecha.primeros += derecha.numHoja;
        derecha.siguientes += derecha.numHoja;
        raiz.derecha = derecha;
        raiz.dato = ".";
        raiz.izquierda = nodo;
        if(!raiz.izquierda.anulable){
            if(!raiz.primeros.equals("")){
                raiz.primeros += ","+raiz.izquierda.primeros;
            }else{
                raiz.primeros = raiz.izquierda.primeros;
            }
        }else{
            if(!raiz.primeros.equals("")){
                raiz.primeros += ","+raiz.izquierda.primeros+","+raiz.derecha.primeros;
            }else{
                raiz.primeros = raiz.izquierda.primeros+","+raiz.derecha.primeros;
            }
        }
        raiz.siguientes = raiz.derecha.siguientes;
        expresiones.get(posicion).raiz = raiz;
    }
    
    public void encontrarMasDerecha(NodoArbol nodo){
        if(nodo.hoja){
            numeroHojaFinal = nodo.numHoja +1;
        }
        if(nodo.derecha != null){
            encontrarMasDerecha(nodo.derecha);
        }else{
            if(nodo.izquierda != null){
                encontrarMasDerecha(nodo.izquierda);
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Visual().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTextArea txtConsola;
    private javax.swing.JTextArea txtContenedor;
    // End of variables declaration//GEN-END:variables
}
